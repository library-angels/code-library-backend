name: Continuous integration
on:
    push:
        branches-ignore:
            - "master"
    pull_request:

jobs:
    format:
        name: Format
        runs-on: ubuntu-latest
        container: debian:buster-slim
        strategy:
            matrix:
                rust-toolchain: [beta, stable]
        continue-on-error: ${{ matrix.rust-toolchain == 'beta' }}
        steps:
            - name: Install Rust toolchain dependencies
              run: apt update && apt install -y wget
            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust-toolchain }}
                  components: rustfmt
                  profile: minimal
                  override: true
            - uses: actions/checkout@v2
            - name: Format source code check
              run: cargo fmt -- --check
    linter:
        name: Linter
        runs-on: ubuntu-latest
        container: debian:buster-slim
        strategy:
            matrix:
                rust-toolchain: [beta, stable]
        continue-on-error: ${{ matrix.rust-toolchain == 'beta' }}
        steps:
            - name: Install Rust toolchain dependencies
              run: apt update && apt install -y wget gcc pkg-config libssl-dev libpq-dev
            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust-toolchain }}
                  components: clippy
                  profile: minimal
                  override: true
            - uses: actions/checkout@v2
            - name: Lint source code
              run: cargo clippy --all-targets --all-features -- -D warnings
    check:
        name: Dependencies
        runs-on: ubuntu-latest
        container: debian:buster-slim
        strategy:
            matrix:
                rust-toolchain: [beta, stable]
        continue-on-error: ${{ matrix.rust-toolchain == 'beta' }}
        steps:
            - name: Install Rust toolchain dependencies
              run: apt update && apt install -y wget gcc pkg-config libssl-dev libpq-dev
            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust-toolchain }}
                  profile: minimal
                  override: true
            - uses: actions/checkout@v2
            - name: Check workspace dependencies
              run: cargo check --all-targets --all-features
    ci-test:
        name: Unit and integration tests
        runs-on: ubuntu-latest
        container: debian:buster-slim
        strategy:
            matrix:
                rust-toolchain: [beta, stable]
        continue-on-error: ${{ matrix.rust-toolchain == 'beta' }}

        env:
            POSTGRES_HOST: postgres # This is the name of the container label in the service section below
            POSTGRES_USER: postgres
            POSTGRES_SECRET: password
            DB_SOCKET: postgres:5432

        services:
            postgres:
                image: postgres:11
                env:
                    POSTGRES_PASSWORD: ${{ env.POSTGRES_SECRET }}
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            - name: Install Rust toolchain dependencies
              run: apt update && apt install -y wget gcc pkg-config libssl-dev libpq-dev postgresql-client dnsutils
            - name: Ping Postgres
              run: psql postgres://$POSTGRES_USER:$POSTGRES_SECRET@$POSTGRES_HOST -l
            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust-toolchain }}
                  profile: minimal
                  override: true
            - uses: actions/checkout@v2
            - name: Run unit and integration tests
              run: cargo test --all-targets --all-features
            - name: Run documentation tests
              run: cargo test --doc --all-features
